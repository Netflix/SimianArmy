#####################################################################
### Configure which client and context to use.
#####################################################################

### The default implementation is to use an AWS Client, equaling a property like the following:
#
#simianarmy.client.context.class=com.netflix.simianarmy.basic.BasicContext

### to use an VSphereClient instead, uncomment this:
#
#simianarmy.client.context.class=com.netflix.simianarmy.client.vsphere.VSphereContext
#
### configure the specific selected client, e.g for VSphere these are
#
#simianarmy.client.vsphere.url=https://YOUR_VSPHERE_SERVER/sdk
#simianarmy.client.vsphere.username=YOUR_SERVICE_ACCOUNT_USERNAME
#simianarmy.client.vsphere.password=YOUR_SERVICE_ACCOUNT_PASSWORD

### configure the specific selected client, e.g for AWS these are

### both "accountKey" and "secretKey" can be left blank or be removed,
### if the credentials are provided as environment variable or
### an instance role is used to handle permissions
### see: http://docs.aws.amazon.com/AWSSdkDocsJava/latest/DeveloperGuide/java-dg-roles.html
#simianarmy.client.aws.accountKey = fakeAccount
#simianarmy.client.aws.secretKey  = fakeSecret
simianarmy.client.aws.region = us-west-1

### To operate under an assumed role - the role will be assumed for all activity, sts:AssumeRole 
### action must be allowed for the inital IAM role being used (long lived credentials)
### http://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html 
#
#simianarmy.client.aws.assumeRoleArn = arn:aws:iam::ACCOUNT:role/ROLE

### The VSpehere client uses a TerminationStrategy for killing VirtualMachines
### You can configure which property and value for it to set prior to resetting the VirtualMachine
#
#simianarmy.client.vsphere.terminationStrategy.property.name=Force Boot
#simianarmy.client.vsphere.terminationStrategy.property.value=server

### Configure vSphere folders as groups. All virtual machines directly under a folder are welded into a group. Turn on
### simianarmy.chaos.VFG.enabled in chaos.properties to enable all groups. simianarmy.chaos.VFG.<vfgName>.enabled can
### be used to enable specific group.
### Group names should be the absolute folder path and be splited by comma.
### Format: Datacenter1/folder1/../folder18,Datacenter1/folder2/../folder20.
### Sample: DC/SERENGETI-vApp/cdh4/worker,DC/SERENGETI-vApp/cdh3/compute
#
#simianarmy.client.vsphere.crawler.groups=fakePath

### Authentication infomation to VMs of all groups.
### If simianarmy.chaos.ssh.key is specified, private key will be used to set up connection first.
### simianarmy.chaos.ssh.password will be used when private key is not specified or fails to set up connection.
#
#simianarmy.chaos.ssh.user=fakeAccount
#simianarmy.chaos.ssh.key=~/.ssh/id_rsa
#simianarmy.chaos.ssh.password=fakeSecret

# Uncomment to use a version of Monkey recorder that does not rely on AWS SDB
#simianarmy.client.recorder.class=com.netflix.simianarmy.basic.LocalDbRecorder

### Operate in Cloud Formation mode - the random suffix appended to Auto Scaling Group names is ignored
### (specify ASG names as usual with no suffix in chaos.properties)  
#
#simianarmy.client.chaos.class=com.netflix.simianarmy.basic.chaos.CloudFormationChaosMonkey